实验备注：WPC数据集点数多，容易爆显存，使用精简的网络结构做的(分别在生成视点的训练函数和getxyz函数两个地方调用了CNN2)


视点生成网络的架构：

1,data文件：
    存放所有的数据集，包括SJTU-PCQA,WPC2.0以及对应的适用于TMM-Net网络的版本
    (302x302分辨率：适用于Rank-PCQA 和 PQA-Net) [这两个网络的输入是224x224的图像和235x235的图像，生成投影图的时候用302x302影响不大]
    (1080x1080分辨率: 适用于TMM-Net) [网络的输入是1280x1280的图像，有必要为它单独生成1280x1280的投影图进行质量排序，视点生成]

2,dataloder文件：加载对应的数据集，生成路径文档 和网络输入：点云模型+质量最差的视图标号

3,Label_Generate文件：
    Label Generate：为数据集挑选出9个视图中质量最差的那个，用自己写的图像质量排序网络，生成worstview.txt
    视图生成：为数据集生成的观察平面设置9个投影图

4,log文件：
    存放训练过程中的文档

5,model文件：
    存放尝试过的一些视点生成网络的结构,最终使用的是基于ResCNN的版本，网络结构具体参考网络结构图文件

6，trainer文件：
    视点生成网络的训练测试函数

6,Utils:
    Ratioperformance：计算生成视点对应的6个投影图的质量与原来的9个投影图的质量关系(曾经是为了验证生成视点的性能，现在不用了，通过浮现别人的PCQA网络的最终效果提升验证性能)

7,verification:
    主要包括三个网络，自己设计的Rank-Net, 开源的PQA-Net 和 TMM-PCQA网络
    分别测试三个网络在SJTU-PCQA以及WPC2.0数据集上通过正交投影和生成视点投影的最终性能，以验证视点生成网络的有效性

8,visualization:
    可视化生成视点在空间中的分布，防止生成的视点不在每个观察平面上

Tips：
    使用过程中首先调用视图生成函数为每个点云模型设定一定数量的视点，获取对应的投影图；
    之后用标签生成函数为每个点云模型的众多视点中选出每个平面内质量最差的视点,保存起来，作为标签；
    最后调用视点生成网络，预测点云模型的最佳视点；
    最后调用性能验证文件，验证生成视点相比于正交视点，最后的性能提升